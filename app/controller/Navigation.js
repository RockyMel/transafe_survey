/*
 * File: app/controller/Navigation.js
 *
 * This file was generated by Sencha Architect version 3.0.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.Navigation', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            listRibbon: 'RibbonMenuPanel#listViewRibbon',
            mapRibbon: 'RibbonMenuPanel#mapRibbon',
            signRibbon: 'RibbonMenuPanel#signRibbon',
            emometerRibbon: 'RibbonMenuPanel#emometerRibbon',
            comfortRibbon: 'RibbonMenuPanel#comfortRibbon',
            statisticsRibbon: 'RibbonMenuPanel#statisticsRibbon'
        },

        control: {
            "#LogoPanel": {
                activate: 'onLogoPanelActivate'
            },
            "#MapViewPanel": {
                activate: 'onMapViewPanelActivate'
            },
            "#SignInUpPanel": {
                activate: 'onSignInUpPanelActivate'
            },
            "#StatisticsTabPanel": {
                activate: 'onStatisticsTabPanelActivate'
            },
            "#EmomenterPanel": {
                activate: 'onEmomenterPanelActivate'
            },
            "#ComfortPanel": {
                activate: 'onComfortPanelActivate'
            },
            "#ListView": {
                activate: 'onListViewActivate'
            }
        }
    },

    onLogoPanelActivate: function(newActiveItem, container, oldActiveItem, eOpts) {
        setTimeout(function(){
            Ext.Viewport.setActiveItem('ListView',{
            type: "slide",
            direction: "left"
        });}, 2000);

    },

    onMapViewPanelActivate: function(newActiveItem, container, oldActiveItem, eOpts) {
        this.getMapRibbon().updateWhenActivated();
        console.log('in list view');
    },

    onSignInUpPanelActivate: function(newActiveItem, container, oldActiveItem, eOpts) {
        this.getSignRibbon().updateWhenActivated();
    },

    onStatisticsTabPanelActivate: function(newActiveItem, container, oldActiveItem, eOpts) {
        this.getStatisticsRibbon().updateWhenActivated();
        console.log('stat activated');

        var pieToHide;
        var pieToShow;
        var legendToHide;
        var legendToShow;
        console.log(localStorage.getItem('ifLogged'));
        if(localStorage.getItem('ifLogged')== 'Invalid User' || localStorage.getItem('ifLogged')=== ''|| localStorage.getItem('ifLogged')=== undefined || localStorage.getItem('ifLogged') === null){
            console.log("anonimous");
            Ext.getCmp('happyPie').hide();
            Ext.getCmp('happyLegend').hide();
            Ext.getCmp('excitedPie').hide();
            Ext.getCmp('excitedLegend').hide();
            Ext.getCmp('safePie').hide();
            Ext.getCmp('safeLegend').hide();
            Ext.getCmp('peacefulPie').hide();
            Ext.getCmp('peacefulLegend').hide();
        }
        else{
            console.log("logged in");
            Ext.getCmp('happyPie').show();
            Ext.getCmp('happyLegend').show();
            Ext.getCmp('excitedPie').show();
            Ext.getCmp('excitedLegend').show();
            Ext.getCmp('safePie').show();
            Ext.getCmp('safeLegend').show();
            Ext.getCmp('peacefulPie').show();
            Ext.getCmp('peacefulLegend').show();
        }
    },

    onEmomenterPanelActivate: function(newActiveItem, container, oldActiveItem, eOpts) {
        this.getEmometerRibbon().updateWhenActivated();
        console.log('in emometer');
    },

    onComfortPanelActivate: function(newActiveItem, container, oldActiveItem, eOpts) {
        this.getComfortRibbon().updateWhenActivated();
    },

    onListViewActivate: function(newActiveItem, container, oldActiveItem, eOpts) {
        this.getListRibbon().updateWhenActivated();
        console.log('in list view');
    }

});